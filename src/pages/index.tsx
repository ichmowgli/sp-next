import { Label } from "@/components/ui/label";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import * as ToggleGroup from "@radix-ui/react-toggle-group";
import { useCalcStore } from "@/lib/store";
import { type NextPage } from "next";
import Head from "next/head";
import { useEffect, type ReactNode, useState, Suspense } from "react";
import dynamic from "next/dynamic";
import { type Prices, type ServicesEnum } from "@/lib/types";
import { SERVICES, LABELS } from "@/lib/constants";

const ItemSwitch = dynamic(() => import("../components/Switch"), {
  ssr: false,
});

const currencyFormatter = new Intl.NumberFormat("pl", {
  style: "currency",
  currency: "PLN",
});

const formatCurrency = (value: number | undefined | null) => {
  return currencyFormatter.format(value ?? 0);
};

const FlowStep = ({
  title_number,
  title,
  children,
}: {
  title_number: number;
  title: string;
  children: ReactNode;
}) => {
  return (
    <div className="mb-6 sm:mb-8 md:mb-10">
      <div className="toggle-group-header">
        <span className="toggle-group-number">{title_number}</span>
        <h2 className="toggle-group-title">{title}</h2>
      </div>
      <div className="sm:ml-6	md:ml-0 lg:ml-10">{children}</div>
    </div>
  );
};

const ToggleYear = ({ year }: { year: keyof Prices }) => {
  const store = useCalcStore();

  return (
    <ToggleGroup.Root
      className="toggle_group"
      style={{ scrollBehavior: "smooth" }}
      type="single"
      defaultValue={year.toString()}
      aria-label="Text alignment"
      onValueChange={(year) => year && store.selectYear(Number(year))}
    >
      {Object.keys(store.prices || {}).map((year) => (
        <ToggleGroup.Item
          className="toggle_item"
          value={year}
          aria-label="Left aligned"
          key={`year-toggle-${year}`}
        >
          {year}
        </ToggleGroup.Item>
      ))}
    </ToggleGroup.Root>
  );
};

const AddOns = () => {
  const store = useCalcStore();

  return (
    <>
      {SERVICES.map((item: ServicesEnum) => (
        <div
          key={`container-switch-${item}`}
          className="flex items-center space-x-2 space-y-2 "
        >
          <Tooltip>
            {item == "decoder" && !store.canAdd(item) ? (
              <TooltipTrigger>
                <ItemSwitch item={item} />
              </TooltipTrigger>
            ) : (
              <ItemSwitch item={item} />
            )}
            <TooltipContent>
              <p className="text-red-400">Can be added only with TV</p>
            </TooltipContent>
          </Tooltip>
          <Label
            htmlFor={`switch-${item}`}
            className="font-regular text-sm md:text-lg xl:text-xl"
          >
            {LABELS[item]} (+{" "}
            {formatCurrency(store.prices![store.selectedYear]![item])}/mo)
          </Label>
        </div>
      ))}
    </>
  );
};

const Offer = () => {
  const store = useCalcStore();

  const activeDiscount = store.getActiveDiscount();
  return (
    <div className="font-regular text-sm md:text-lg xl:text-xl">
      <p>Year: {store.selectedYear}</p>
      <p>
        Add-Ons:{" "}
        {store.selectedItems.length
          ? store.selectedItems.map((item) => LABELS[item]).join(", ")
          : "None"}
      </p>
      {activeDiscount > 0 && (
        <p>Your discount: {formatCurrency(activeDiscount)}/mo</p>
      )}
      <h3 className="mt-4 text-xl font-bold md:text-2xl">
        Total price: {formatCurrency(store.totalPrice())}/mo
      </h3>
    </div>
  );
};

const Home: NextPage = () => {
  const store = useCalcStore();
  const [shouldLoad, setShouldLoad] = useState(!store.prices);

  useEffect(() => {
    if (shouldLoad) {
      void store.saturatePrices().then(() => setShouldLoad(false));
    }
  }, []);

  return (
    <>
      <Head>
        <title>SP Test</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <TooltipProvider>
        <main className="container mt-20">
          {shouldLoad ? (
            <div className="text-center">Loading...</div>
          ) : (
            <>
              <FlowStep title_number={1} title={"Select a year"}>
                <ToggleYear year={store.selectedYear} />
              </FlowStep>
              <FlowStep title_number={3} title={"Choose Add-ons"}>
                <AddOns />
              </FlowStep>
              <FlowStep title_number={4} title={"Review your offer"}>
                <Offer />
              </FlowStep>{" "}
            </>
          )}
        </main>
      </TooltipProvider>
    </>
  );
};

export default Home;
