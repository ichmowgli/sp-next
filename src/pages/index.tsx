import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import * as ToggleGroup from "@radix-ui/react-toggle-group";
import { BUNDLES, LABELS, PRICES } from "@/lib/constants";
import { useCalcStore } from "@/lib/store";
import { type NextPage } from "next";
import Head from "next/head";

const bundleKeys = Object.keys(BUNDLES) as Array<keyof typeof BUNDLES>;

const ItemSwitch = ({
  bundle,
  item,
}: {
  bundle: keyof typeof BUNDLES;
  item: string;
}) => {
  const store = useCalcStore();

  return (
    <Switch
      id={`switch-${item}`}
      onCheckedChange={(checked) =>
        checked
          ? store.addService(bundle, item)
          : store.removeService(bundle, item)
      }
      checked={store.isSelected(bundle, item)}
      disabled={!store.canAdd(bundle, item)}
    />
  );
};

const BundleCard = ({ bundle }: { bundle: keyof typeof BUNDLES }) => {
  const { selectBundle, canAdd, totalPrice } = useCalcStore();

  return (
    <div className="h-96 w-60">
      <Card className="h-full">
        <CardHeader>
          <CardTitle className="text-3xl">{LABELS[bundle]}</CardTitle>
        </CardHeader>
        <CardContent>
          {BUNDLES[bundle].items.map((item) => (
            <div
              key={`container-switch-${item}`}
              className="flex items-center space-x-2"
            >
              <Tooltip>
                {item == "decoder" && !canAdd(bundle, item) ? (
                  <TooltipTrigger>
                    <ItemSwitch bundle={bundle} item={item} />
                  </TooltipTrigger>
                ) : (
                  <ItemSwitch bundle={bundle} item={item} />
                )}
                <TooltipContent>
                  <p className="text-red-400">Can be added only with TV</p>
                </TooltipContent>
              </Tooltip>
              <Label htmlFor={`switch-${item}`} className="text-lg">
                {LABELS[item]}
              </Label>
            </div>
          ))}
        </CardContent>
        <CardFooter>
          <Button
            onClick={() => selectBundle(bundle)}
            disabled={totalPrice(bundle) == 0}
          >
            Select for {totalPrice(bundle)} zl / mo
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
};

const Home: NextPage = () => {
  const store = useCalcStore();

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {store.selectedYear}
      {JSON.stringify(store.selectedBundle)}{" "}
      {JSON.stringify(store.selectedItems)}
      <ToggleGroup.Root
        className="inline-flex space-x-px rounded bg-mauve6 shadow-[0_2px_10px] shadow-blackA7"
        type="single"
        defaultValue="left"
        aria-label="Text alignment"
        onValueChange={(year) =>
          year && store.selectYear(Number(year) as keyof typeof PRICES)
        }
      >
        {Object.keys(PRICES).map((year) => (
          <ToggleGroup.Item
            className="color-mauve11 flex h-[35px] w-14 items-center justify-center bg-white text-base leading-4 first:rounded-l last:rounded-r hover:bg-violet3 focus:z-10 focus:outline-none data-[state=on]:bg-violet6 data-[state=on]:text-violet12"
            value={year}
            aria-label="Left aligned"
            key={`year-toggle-${year}`}
          >
            {year}
          </ToggleGroup.Item>
        ))}
      </ToggleGroup.Root>
      <TooltipProvider>
        <main className="flex min-h-screen flex-row items-center justify-center space-x-10">
          {bundleKeys.map((bundle) => (
            <BundleCard key={`bundle-${bundle}`} bundle={bundle} />
          ))}
        </main>
      </TooltipProvider>
    </>
  );
};

export default Home;
